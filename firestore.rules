rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Reglas para acceso a documentos que est치n bajo la colecci칩n "questions"
    match /questions/{questionId} {
      allow read, write: if request.auth.uid != null;
    }
    
    // Reglas para acceso a documentos que est치n bajo la colecci칩n "users"
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    match /users/{userId}/paymentMethods/{paymentMethodId} {
    	allow read, update, create, delete: if request.auth.uid == userId;
		}
		match /subscriptions/{subscriptionId} {
    	allow read: if request.auth.uid != null && request.auth.uid in resource.data.permissions.access;
    	allow update: if request.auth.uid != null && request.auth.uid in resource.data.permissions.admin && (!request.resource.data.diff(resource.data).affectedKeys()
        .hasAny(['currency', 'ownerId', 'paymentCycle', 'paymentMethod', 'plan', 'price', 'stripeItems', 'stripeSubscriptionId', 'subscriptionCreated', 'subscriptionCurrentPeriodEnd', 'subscriptionCurrentPeriodStart', 'subscriptionEnded', 'subscriptionStatus']));
		}
		match /subscriptions/{subscriptionId}/invoices/{invoiceId} {
    	allow read: if request.auth.uid != null && request.auth.uid in get(/databases/$(database)/documents/subscriptions/$(subscriptionId)).data.permissions.admin;
		}
		match /invites/{inviteId} {
    	allow read, delete: if request.auth.uid != null && request.auth.token.email == resource.data.email;
		}
    match /exams/{examId} {
      allow read: if request != null;
      allow delete: if request.auth != null && 
        request.auth.uid != null &&
        request.auth.uid in get(/databases/$(database)/documents/subscriptions/$(resource.data.subscriptionId)).data.permissions.admin;
    }
  }
}
